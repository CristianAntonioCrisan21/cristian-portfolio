---
import cvData from '../data/cv.json';

// Filtrar solo las experiencias profesionales
const experiences = cvData.timeline.filter(item => item.type === 'experience');
---

<section id="experience" class="section overflow-hidden">
  <div class="container">
    <h2 class="heading text-center mb-16">Experiencia Profesional</h2>
    
    <div class="max-w-6xl mx-auto relative">
      <!-- Slider Container -->
      <div class="experience-slider relative">
        <!-- Slides Container -->
        <div class="slider-track flex transition-transform duration-700 ease-out" id="sliderTrack">
          {experiences.map((exp, index) => (
            <div class="slide w-full flex-shrink-0 px-4">
              <article class="relative group">
                <!-- Tarjeta principal con efectos espectaculares -->
                <div class="card relative overflow-hidden group-hover:scale-[1.02] transition-all duration-500 bg-gradient-to-br from-zinc-900/50 to-zinc-800/30 backdrop-blur-xl border-2 border-white/10 group-hover:border-brand/30">
                  
                  <!-- Efecto de partículas de fondo -->
                  <div class="absolute inset-0 opacity-20">
                    <div class="absolute top-4 left-4 w-2 h-2 bg-brand/40 rounded-full animate-pulse"></div>
                    <div class="absolute top-8 right-8 w-1 h-1 bg-brand/60 rounded-full animate-ping"></div>
                    <div class="absolute bottom-6 left-12 w-1.5 h-1.5 bg-brand/30 rounded-full animate-pulse delay-300"></div>
                    <div class="absolute bottom-12 right-6 w-1 h-1 bg-brand/50 rounded-full animate-ping delay-500"></div>
                  </div>
                  
                  <!-- Número de slide -->
                  <div class="absolute top-6 right-6 w-12 h-12 rounded-full bg-brand/10 border border-brand/30 flex items-center justify-center">
                    <span class="text-brand font-bold text-lg">{String(index + 1).padStart(2, '0')}</span>
                  </div>
                  
                  <!-- Contenido principal -->
                  <div class="relative z-10 p-8">
                    <header class="mb-6">
                      <div class="flex flex-col gap-3 mb-4">
                        <h3 class="text-2xl md:text-3xl font-bold text-zinc-100 group-hover:text-brand transition-colors duration-300">
                          {exp.title}
                        </h3>
                        <div class="flex items-center gap-3 text-brand font-medium">
                          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h4M9 7h6m-6 4h6m-6 4h6"></path>
                          </svg>
                          <span class="text-lg">{exp.org}</span>
                        </div>
                      </div>
                      
                      <div class="flex flex-col sm:flex-row sm:items-center gap-3 text-zinc-400">
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4 text-brand" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                          </svg>
                          <span class="font-medium">{exp.dates}</span>
                        </div>
                        
                        {exp.location && (
                          <>
                            <span class="hidden sm:block text-zinc-600">•</span>
                            <div class="flex items-center gap-2">
                              <svg class="w-4 h-4 text-zinc-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                              </svg>
                              <span>{exp.location}</span>
                            </div>
                          </>
                        )}
                      </div>
                    </header>
                    
                    <!-- Lista de logros con animaciones -->
                    <div class="space-y-4">
                      {exp.bullets.map((bullet, bulletIndex) => (
                        <div class="flex items-start gap-4 text-zinc-300 leading-relaxed group/bullet">
                          <div class="w-2 h-2 bg-gradient-to-r from-brand to-brand/60 rounded-full mt-2.5 flex-shrink-0 group-hover/bullet:scale-125 transition-transform duration-300"></div>
                          <span class="group-hover/bullet:text-zinc-200 transition-colors duration-300">{bullet}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <!-- Efecto de brillo espectacular -->
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-brand/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1200 pointer-events-none"></div>
                  
                  <!-- Borde animado -->
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-brand/20 via-transparent to-brand/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"></div>
                </div>
              </article>
            </div>
          ))}
        </div>
        
        <!-- Controles de navegación -->
        <div class="flex items-center justify-center mt-12 gap-8">
          <!-- Botón anterior -->
          <button 
            id="prevBtn" 
            class="group flex items-center justify-center w-12 h-12 rounded-full bg-zinc-800/50 border border-white/10 hover:border-brand/50 hover:bg-brand/10 transition-all duration-300 hover:scale-110"
            aria-label="Experiencia anterior"
          >
            <svg class="w-5 h-5 text-zinc-400 group-hover:text-brand transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          
          <!-- Indicadores de slides -->
          <div class="flex gap-3" id="slideIndicators">
            {experiences.map((_, index) => (
              <button 
                class={`slide-dot w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-brand scale-125' : 'bg-zinc-600 hover:bg-zinc-500'}`}
                data-slide={index}
                aria-label={`Ir a experiencia ${index + 1}`}
              ></button>
            ))}
          </div>
          
          <!-- Botón siguiente -->
          <button 
            id="nextBtn" 
            class="group flex items-center justify-center w-12 h-12 rounded-full bg-zinc-800/50 border border-white/10 hover:border-brand/50 hover:bg-brand/10 transition-all duration-300 hover:scale-110"
            aria-label="Siguiente experiencia"
          >
            <svg class="w-5 h-5 text-zinc-400 group-hover:text-brand transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
        
        <!-- Contador de slides -->
        <div class="text-center mt-6">
          <span class="text-sm text-zinc-500">
            <span id="currentSlide" class="text-brand font-medium">1</span> 
            / 
            <span class="text-zinc-400">{experiences.length}</span>
          </span>
        </div>
      </div>
    </div>
  </div>
</section>

<script is:inline>
  // Slider de experiencia profesional
  function initExperienceSlider() {
    let currentSlide = 0;
    const slides = document.querySelectorAll('.slide');
    const totalSlides = slides.length;
    const sliderTrack = document.getElementById('sliderTrack');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const slideIndicators = document.querySelectorAll('.slide-dot');
    const currentSlideSpan = document.getElementById('currentSlide');
    
    if (!sliderTrack || totalSlides === 0) return;
    
    function goToSlide(slideIndex) {
      currentSlide = slideIndex;
      const translateX = -slideIndex * 100;
      sliderTrack.style.transform = `translateX(${translateX}%)`;
      updateIndicators();
      updateCounter();
    }
    
    function nextSlide() {
      currentSlide = (currentSlide + 1) % totalSlides;
      goToSlide(currentSlide);
    }
    
    function prevSlide() {
      currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
      goToSlide(currentSlide);
    }
    
    function updateIndicators() {
      slideIndicators.forEach((dot, index) => {
        if (index === currentSlide) {
          dot.classList.add('bg-brand', 'scale-125');
          dot.classList.remove('bg-zinc-600');
        } else {
          dot.classList.remove('bg-brand', 'scale-125');
          dot.classList.add('bg-zinc-600');
        }
      });
    }
    
    function updateCounter() {
      if (currentSlideSpan) {
        currentSlideSpan.textContent = currentSlide + 1;
      }
    }
    
    // Event listeners
    if (prevBtn) prevBtn.addEventListener('click', prevSlide);
    if (nextBtn) nextBtn.addEventListener('click', nextSlide);
    
    slideIndicators.forEach((dot, index) => {
      dot.addEventListener('click', () => goToSlide(index));
    });
    
    // Navegación con teclado
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') prevSlide();
      if (e.key === 'ArrowRight') nextSlide();
    });
    
    // Touch/swipe support
    let startX = 0;
    let endX = 0;
    
    sliderTrack.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
    });
    
    sliderTrack.addEventListener('touchend', (e) => {
      endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      
      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
      }
    });
    
    // Auto-play opcional (descomentado si se desea)
    // setInterval(nextSlide, 5000);
  }
  
  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initExperienceSlider);
  } else {
    initExperienceSlider();
  }
</script>
